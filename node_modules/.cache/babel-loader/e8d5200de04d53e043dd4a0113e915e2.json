{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _invoke from \"lodash-es/invoke\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component, createRef } from 'react';\nimport { childrenUtils, customPropTypes, doesNodeContainClick, getElementType, getUnhandledProps, useKeyOnly, useVerticalAlignProp } from '../../lib';\n/**\n * An inner element for a Dimmer.\n */\n\nvar DimmerInner = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(DimmerInner, _Component);\n\n  function DimmerInner() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.containerRef = /*#__PURE__*/createRef();\n    _this.contentRef = /*#__PURE__*/createRef();\n\n    _this.handleClick = function (e) {\n      var contentRef = _this.contentRef.current;\n\n      _invoke(_this.props, 'onClick', e, _this.props);\n\n      if (contentRef && contentRef !== e.target && doesNodeContainClick(contentRef, e)) {\n        return;\n      }\n\n      _invoke(_this.props, 'onClickOutside', e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = DimmerInner.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var active = this.props.active;\n    this.toggleStyles(active);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var currentActive = this.props.active;\n    var prevActive = prevProps.active;\n    if (prevActive !== currentActive) this.toggleStyles(currentActive);\n  };\n\n  _proto.toggleStyles = function toggleStyles(active) {\n    var containerRef = this.containerRef.current;\n    if (!containerRef || !containerRef.style) return;\n\n    if (active) {\n      containerRef.style.setProperty('display', 'flex', 'important');\n    } else {\n      containerRef.style.removeProperty('display');\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        children = _this$props.children,\n        className = _this$props.className,\n        content = _this$props.content,\n        disabled = _this$props.disabled,\n        inverted = _this$props.inverted,\n        page = _this$props.page,\n        simple = _this$props.simple,\n        verticalAlign = _this$props.verticalAlign;\n    var classes = cx('ui', useKeyOnly(active, 'active transition visible'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(page, 'page'), useKeyOnly(simple, 'simple'), useVerticalAlignProp(verticalAlign), 'dimmer', className);\n    var rest = getUnhandledProps(DimmerInner, this.props);\n    var ElementType = getElementType(DimmerInner, this.props);\n    var childrenContent = childrenUtils.isNil(children) ? content : children;\n    return /*#__PURE__*/React.createElement(Ref, {\n      innerRef: this.containerRef\n    }, /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      onClick: this.handleClick\n    }), childrenContent && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      ref: this.contentRef\n    }, childrenContent)));\n  };\n\n  return DimmerInner;\n}(Component);\n\nDimmerInner.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"inverted\", \"onClick\", \"onClickOutside\", \"page\", \"simple\", \"verticalAlign\"];\nexport { DimmerInner as default };\nDimmerInner.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** An active dimmer will dim its parent container. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A disabled dimmer cannot be activated */\n  disabled: PropTypes.bool,\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Handles click outside Dimmer's content, but inside Dimmer area.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClickOutside: PropTypes.func,\n\n  /** A dimmer can be formatted to have its colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** A dimmer can be formatted to be fixed to the page. */\n  page: PropTypes.bool,\n\n  /** A dimmer can be controlled with simple prop. */\n  simple: PropTypes.bool,\n\n  /** A dimmer can have its content top or bottom aligned. */\n  verticalAlign: PropTypes.oneOf(['bottom', 'top'])\n} : {};","map":null,"metadata":{},"sourceType":"module"}