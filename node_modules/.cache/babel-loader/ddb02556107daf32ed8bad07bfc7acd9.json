{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _without from \"lodash-es/without\";\nimport _times from \"lodash-es/times\";\nimport _invoke from \"lodash-es/invoke\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { ModernAutoControlledComponent as Component, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport RatingIcon from './RatingIcon';\n/**\n * A rating indicates user interest in content.\n */\n\nvar Rating = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Rating, _Component);\n\n  function Rating() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(_args)) || this;\n\n    _this.handleIconClick = function (e, _ref) {\n      var index = _ref.index;\n      var _this$props = _this.props,\n          clearable = _this$props.clearable,\n          disabled = _this$props.disabled,\n          maxRating = _this$props.maxRating,\n          onRate = _this$props.onRate;\n      var rating = _this.state.rating;\n      if (disabled) return; // default newRating is the clicked icon\n      // allow toggling a binary rating\n      // allow clearing ratings\n\n      var newRating = index + 1;\n\n      if (clearable === 'auto' && maxRating === 1) {\n        newRating = +!rating;\n      } else if (clearable === true && newRating === rating) {\n        newRating = 0;\n      } // set rating\n\n\n      _this.setState({\n        rating: newRating,\n        isSelecting: false\n      });\n\n      if (onRate) onRate(e, _extends({}, _this.props, {\n        rating: newRating\n      }));\n    };\n\n    _this.handleIconMouseEnter = function (e, _ref2) {\n      var index = _ref2.index;\n      if (_this.props.disabled) return;\n\n      _this.setState({\n        selectedIndex: index,\n        isSelecting: true\n      });\n    };\n\n    _this.handleMouseLeave = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _invoke.apply(void 0, [_this.props, 'onMouseLeave'].concat(args));\n\n      if (_this.props.disabled) return;\n\n      _this.setState({\n        selectedIndex: -1,\n        isSelecting: false\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = Rating.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        disabled = _this$props2.disabled,\n        icon = _this$props2.icon,\n        maxRating = _this$props2.maxRating,\n        size = _this$props2.size;\n    var _this$state = this.state,\n        rating = _this$state.rating,\n        selectedIndex = _this$state.selectedIndex,\n        isSelecting = _this$state.isSelecting;\n    var classes = cx('ui', icon, size, useKeyOnly(disabled, 'disabled'), useKeyOnly(isSelecting && !disabled && selectedIndex >= 0, 'selected'), 'rating', className);\n    var rest = getUnhandledProps(Rating, this.props);\n    var ElementType = getElementType(Rating, this.props);\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      role: \"radiogroup\",\n      onMouseLeave: this.handleMouseLeave,\n      tabIndex: disabled ? 0 : -1\n    }), _times(maxRating, function (i) {\n      return /*#__PURE__*/React.createElement(RatingIcon, {\n        tabIndex: disabled ? -1 : 0,\n        active: rating >= i + 1,\n        \"aria-checked\": rating === i + 1,\n        \"aria-posinset\": i + 1,\n        \"aria-setsize\": maxRating,\n        index: i,\n        key: i,\n        onClick: _this2.handleIconClick,\n        onMouseEnter: _this2.handleIconMouseEnter,\n        selected: selectedIndex >= i && isSelecting\n      });\n    }));\n  };\n\n  return Rating;\n}(Component);\n\nRating.handledProps = [\"as\", \"className\", \"clearable\", \"defaultRating\", \"disabled\", \"icon\", \"maxRating\", \"onRate\", \"rating\", \"size\"];\nexport { Rating as default };\nRating.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /**\n   * You can clear the rating by clicking on the current start rating.\n   * By default a rating will be only clearable if there is 1 icon.\n   * Setting to `true`/`false` will allow or disallow a user to clear their rating.\n   */\n  clearable: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['auto'])]),\n\n  /** The initial rating value. */\n  defaultRating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** You can disable or enable interactive rating.  Makes a read-only rating. */\n  disabled: PropTypes.bool,\n\n  /** A rating can use a set of star or heart icons. */\n  icon: PropTypes.oneOf(['star', 'heart']),\n\n  /** The total number of icons. */\n  maxRating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Called after user selects a new rating.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed rating.\n   */\n  onRate: PropTypes.func,\n\n  /** The current number of active icons. */\n  rating: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** A progress bar can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium', 'big'))\n} : {};\nRating.autoControlledProps = ['rating'];\nRating.defaultProps = {\n  clearable: 'auto',\n  maxRating: 1\n};\nRating.Icon = RatingIcon;","map":null,"metadata":{},"sourceType":"module"}