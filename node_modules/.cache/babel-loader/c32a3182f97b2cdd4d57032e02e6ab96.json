{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _invoke from \"lodash-es/invoke\";\nimport { isRefObject } from '@fluentui/react-component-ref';\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component, createRef } from 'react';\nimport { customPropTypes, eventStack, getElementType, getUnhandledProps, isBrowser } from '../../lib';\n/**\n * Sticky content stays fixed to the browser viewport while another column of content is visible on the page.\n */\n\nvar Sticky = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Sticky, _Component);\n\n  function Sticky() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      active: true,\n      sticky: false\n    };\n    _this.stickyRef = /*#__PURE__*/createRef();\n    _this.triggerRef = /*#__PURE__*/createRef();\n\n    _this.addListeners = function (scrollContext) {\n      var scrollContextNode = isRefObject(scrollContext) ? scrollContext.current : scrollContext;\n\n      if (scrollContextNode) {\n        eventStack.sub('resize', _this.handleUpdate, {\n          target: scrollContextNode\n        });\n        eventStack.sub('scroll', _this.handleUpdate, {\n          target: scrollContextNode\n        });\n      }\n    };\n\n    _this.removeListeners = function (scrollContext) {\n      var scrollContextNode = isRefObject(scrollContext) ? scrollContext.current : scrollContext;\n\n      if (scrollContextNode) {\n        eventStack.unsub('resize', _this.handleUpdate, {\n          target: scrollContextNode\n        });\n        eventStack.unsub('scroll', _this.handleUpdate, {\n          target: scrollContextNode\n        });\n      }\n    };\n\n    _this.update = function (e) {\n      var pushing = _this.state.pushing;\n      _this.ticking = false;\n\n      _this.assignRects();\n\n      if (pushing) {\n        if (_this.didReachStartingPoint()) return _this.stickToContextTop(e);\n        if (_this.didTouchScreenBottom()) return _this.stickToScreenBottom(e);\n        return _this.stickToContextBottom(e);\n      }\n\n      if (_this.isOversized()) {\n        if (_this.contextRect.top > 0) return _this.stickToContextTop(e);\n        if (_this.contextRect.bottom < window.innerHeight) return _this.stickToContextBottom(e);\n      }\n\n      if (_this.didTouchScreenTop()) {\n        if (_this.didReachContextBottom()) return _this.stickToContextBottom(e);\n        return _this.stickToScreenTop(e);\n      }\n\n      return _this.stickToContextTop(e);\n    };\n\n    _this.handleUpdate = function (e) {\n      if (!_this.ticking) {\n        _this.ticking = true;\n        _this.frameId = requestAnimationFrame(function () {\n          return _this.update(e);\n        });\n      }\n    };\n\n    _this.assignRects = function () {\n      var context = _this.props.context;\n      var contextNode = isRefObject(context) ? context.current : context || document.body;\n      _this.triggerRect = _this.triggerRef.current.getBoundingClientRect();\n      _this.contextRect = contextNode.getBoundingClientRect();\n      _this.stickyRect = _this.stickyRef.current.getBoundingClientRect();\n    };\n\n    _this.didReachContextBottom = function () {\n      var offset = _this.props.offset;\n      return _this.stickyRect.height + offset >= _this.contextRect.bottom;\n    };\n\n    _this.didReachStartingPoint = function () {\n      return _this.stickyRect.top <= _this.triggerRect.top;\n    };\n\n    _this.didTouchScreenTop = function () {\n      return _this.triggerRect.top < _this.props.offset;\n    };\n\n    _this.didTouchScreenBottom = function () {\n      var bottomOffset = _this.props.bottomOffset;\n      return _this.contextRect.bottom + bottomOffset > window.innerHeight;\n    };\n\n    _this.isOversized = function () {\n      return _this.stickyRect.height > window.innerHeight;\n    };\n\n    _this.pushing = function (pushing) {\n      var possible = _this.props.pushing;\n      if (possible) _this.setState({\n        pushing: pushing\n      });\n    };\n\n    _this.stick = function (e, bound) {\n      _this.setState({\n        bound: bound,\n        sticky: true\n      });\n\n      _invoke(_this.props, 'onStick', e, _this.props);\n    };\n\n    _this.unstick = function (e, bound) {\n      _this.setState({\n        bound: bound,\n        sticky: false\n      });\n\n      _invoke(_this.props, 'onUnstick', e, _this.props);\n    };\n\n    _this.stickToContextBottom = function (e) {\n      _invoke(_this.props, 'onBottom', e, _this.props);\n\n      _this.stick(e, true);\n\n      _this.pushing(true);\n    };\n\n    _this.stickToContextTop = function (e) {\n      _invoke(_this.props, 'onTop', e, _this.props);\n\n      _this.unstick(e, false);\n\n      _this.pushing(false);\n    };\n\n    _this.stickToScreenBottom = function (e) {\n      var bottom = _this.props.bottomOffset;\n\n      _this.stick(e, false);\n\n      _this.setState({\n        bottom: bottom,\n        top: null\n      });\n    };\n\n    _this.stickToScreenTop = function (e) {\n      var top = _this.props.offset;\n\n      _this.stick(e, false);\n\n      _this.setState({\n        top: top,\n        bottom: null\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = Sticky.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (!isBrowser()) return;\n    var active = this.state.active;\n\n    if (active) {\n      this.handleUpdate();\n      this.addListeners(this.props.scrollContext);\n    }\n  };\n\n  Sticky.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (state.active !== props.active && !props.active) {\n      return {\n        active: props.active,\n        sticky: false\n      };\n    }\n\n    return {\n      active: props.active\n    };\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (prevState.active === this.state.active) {\n      if (prevProps.scrollContext !== this.props.scrollContext) {\n        this.removeListeners(prevProps.scrollContext);\n        this.addListeners(this.props.scrollContext);\n      }\n\n      return;\n    }\n\n    if (this.state.active) {\n      this.handleUpdate();\n      this.addListeners(this.props.scrollContext);\n      return;\n    }\n\n    this.removeListeners(prevProps.scrollContext);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (!isBrowser()) return;\n    var active = this.state.active;\n\n    if (active) {\n      this.removeListeners(this.props.scrollContext);\n      cancelAnimationFrame(this.frameId);\n    }\n  } // ----------------------------------------\n  // Events\n  // ----------------------------------------\n  ;\n\n  _proto.computeStyle = function computeStyle() {\n    var styleElement = this.props.styleElement;\n    var _this$state = this.state,\n        bottom = _this$state.bottom,\n        bound = _this$state.bound,\n        sticky = _this$state.sticky,\n        top = _this$state.top;\n    if (!sticky) return styleElement;\n    return _extends({\n      bottom: bound ? 0 : bottom,\n      top: bound ? undefined : top,\n      width: this.triggerRect.width\n    }, styleElement);\n  } // Return true when the component reached the bottom of the context\n  ; // ----------------------------------------\n  // Render\n  // ----------------------------------------\n\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        className = _this$props.className;\n    var _this$state2 = this.state,\n        bottom = _this$state2.bottom,\n        bound = _this$state2.bound,\n        sticky = _this$state2.sticky;\n    var rest = getUnhandledProps(Sticky, this.props);\n    var ElementType = getElementType(Sticky, this.props);\n    var containerClasses = cx(sticky && 'ui', sticky && 'stuck-container', sticky && (bound ? 'bound-container' : 'fixed-container'), className);\n    var elementClasses = cx('ui', sticky && (bound ? 'bound bottom' : 'fixed'), sticky && !bound && (bottom === null ? 'top' : 'bottom'), 'sticky');\n    var triggerStyles = sticky && this.stickyRect ? {\n      height: this.stickyRect.height\n    } : {};\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: containerClasses\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.triggerRef,\n      style: triggerStyles\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: elementClasses,\n      ref: this.stickyRef,\n      style: this.computeStyle()\n    }, children));\n  };\n\n  return Sticky;\n}(Component);\n\nSticky.handledProps = [\"active\", \"as\", \"bottomOffset\", \"children\", \"className\", \"context\", \"offset\", \"onBottom\", \"onStick\", \"onTop\", \"onUnstick\", \"pushing\", \"scrollContext\", \"styleElement\"];\nexport { Sticky as default };\nSticky.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A Sticky can be active. */\n  active: PropTypes.bool,\n\n  /** Offset in pixels from the bottom of the screen when fixing element to viewport. */\n  bottomOffset: PropTypes.number,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Context which sticky element should stick to. */\n  context: PropTypes.oneOfType([customPropTypes.domNode, customPropTypes.refObject]),\n\n  /** Offset in pixels from the top of the screen when fixing element to viewport. */\n  offset: PropTypes.number,\n\n  /**\n   * Callback when element is bound to bottom of parent container.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onBottom: PropTypes.func,\n\n  /**\n   * Callback when element is fixed to page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onStick: PropTypes.func,\n\n  /**\n   * Callback when element is bound to top of parent container.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onTop: PropTypes.func,\n\n  /**\n   * Callback when element is unfixed from page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onUnstick: PropTypes.func,\n\n  /** Whether element should be \"pushed\" by the viewport, attaching to the bottom of the screen when scrolling up. */\n  pushing: PropTypes.bool,\n\n  /** Context which sticky should attach onscroll events. */\n  scrollContext: PropTypes.oneOfType([customPropTypes.domNode, customPropTypes.refObject]),\n\n  /** Custom style for sticky element. */\n  styleElement: PropTypes.object\n} : {};\nSticky.defaultProps = {\n  active: true,\n  bottomOffset: 0,\n  offset: 0,\n  scrollContext: isBrowser() ? window : null\n};","map":null,"metadata":{},"sourceType":"module"}