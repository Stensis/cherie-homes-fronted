{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _invoke from \"lodash-es/invoke\";\nimport cx from 'clsx';\nimport keyboardKey from 'keyboard-key';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * An internal icon sub-component for Rating component\n */\n\nvar RatingIcon = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(RatingIcon, _Component);\n\n  function RatingIcon() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (e) {\n      _invoke(_this.props, 'onClick', e, _this.props);\n    };\n\n    _this.handleKeyUp = function (e) {\n      _invoke(_this.props, 'onKeyUp', e, _this.props);\n\n      switch (keyboardKey.getCode(e)) {\n        case keyboardKey.Enter:\n        case keyboardKey.Spacebar:\n          e.preventDefault();\n\n          _invoke(_this.props, 'onClick', e, _this.props);\n\n          break;\n\n        default:\n      }\n    };\n\n    _this.handleMouseEnter = function (e) {\n      _invoke(_this.props, 'onMouseEnter', e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = RatingIcon.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        className = _this$props.className,\n        selected = _this$props.selected;\n    var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(selected, 'selected'), 'icon', className);\n    var rest = getUnhandledProps(RatingIcon, this.props);\n    var ElementType = getElementType(RatingIcon, this.props);\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      onClick: this.handleClick,\n      onKeyUp: this.handleKeyUp,\n      onMouseEnter: this.handleMouseEnter,\n      role: \"radio\"\n    }));\n  };\n\n  return RatingIcon;\n}(Component);\n\nRatingIcon.handledProps = [\"active\", \"as\", \"className\", \"index\", \"onClick\", \"onKeyUp\", \"onMouseEnter\", \"selected\"];\nexport { RatingIcon as default };\nRatingIcon.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Indicates activity of an icon. */\n  active: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** An index of icon inside Rating. */\n  index: PropTypes.number,\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Called on keyup.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * Called on mouseenter.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onMouseEnter: PropTypes.func,\n\n  /** Indicates selection of an icon. */\n  selected: PropTypes.bool\n} : {};\nRatingIcon.defaultProps = {\n  as: 'i'\n};","map":null,"metadata":{},"sourceType":"module"}