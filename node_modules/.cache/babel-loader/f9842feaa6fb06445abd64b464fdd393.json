{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _includes from \"lodash-es/includes\";\nimport _isNil from \"lodash-es/isNil\";\nimport _get from \"lodash-es/get\";\nimport _invoke from \"lodash-es/invoke\";\n\nvar _TRANSITION_CALLBACK_, _TRANSITION_STYLE_TYP;\n\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { cloneElement, Component } from 'react';\nimport { normalizeTransitionDuration, SUI, useKeyOnly } from '../../lib';\nimport TransitionGroup from './TransitionGroup';\nimport { computeStatuses, TRANSITION_STATUS_ENTERED, TRANSITION_STATUS_ENTERING, TRANSITION_STATUS_EXITED, TRANSITION_STATUS_EXITING, TRANSITION_STATUS_INITIAL, TRANSITION_STATUS_UNMOUNTED } from './utils/computeStatuses';\nvar TRANSITION_CALLBACK_TYPE = (_TRANSITION_CALLBACK_ = {}, _TRANSITION_CALLBACK_[TRANSITION_STATUS_ENTERED] = 'show', _TRANSITION_CALLBACK_[TRANSITION_STATUS_EXITED] = 'hide', _TRANSITION_CALLBACK_);\nvar TRANSITION_STYLE_TYPE = (_TRANSITION_STYLE_TYP = {}, _TRANSITION_STYLE_TYP[TRANSITION_STATUS_ENTERING] = 'show', _TRANSITION_STYLE_TYP[TRANSITION_STATUS_EXITING] = 'hide', _TRANSITION_STYLE_TYP);\n/**\n * A transition is an animation usually used to move content in or out of view.\n */\n\nvar Transition = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Transition, _Component);\n\n  function Transition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      status: TRANSITION_STATUS_INITIAL\n    };\n\n    _this.handleStart = function (nextStatus) {\n      var duration = _this.props.duration;\n      var durationType = TRANSITION_CALLBACK_TYPE[nextStatus];\n      var durationValue = normalizeTransitionDuration(duration, durationType);\n      _this.timeoutId = setTimeout(function () {\n        return _this.setState({\n          status: nextStatus\n        });\n      }, durationValue);\n    };\n\n    _this.updateStatus = function (prevState) {\n      if (prevState.status !== _this.state.status) {\n        // Timeout should be cleared in any case as previous can lead set to unexpected `nextStatus`\n        clearTimeout(_this.timeoutId);\n\n        if (_this.state.nextStatus) {\n          _this.handleStart(_this.state.nextStatus);\n        }\n      }\n\n      if (!prevState.animating && _this.state.animating) {\n        _invoke(_this.props, 'onStart', null, _extends({}, _this.props, {\n          status: _this.state.status\n        }));\n      }\n\n      if (prevState.animating && !_this.state.animating) {\n        var callback = _this.state.status === TRANSITION_STATUS_ENTERED ? 'onShow' : 'onHide';\n\n        _invoke(_this.props, 'onComplete', null, _extends({}, _this.props, {\n          status: _this.state.status\n        }));\n\n        _invoke(_this.props, callback, null, _extends({}, _this.props, {\n          status: _this.state.status\n        }));\n      }\n    };\n\n    _this.computeClasses = function () {\n      var _this$props = _this.props,\n          animation = _this$props.animation,\n          directional = _this$props.directional,\n          children = _this$props.children;\n      var _this$state = _this.state,\n          animating = _this$state.animating,\n          status = _this$state.status;\n\n      var childClasses = _get(children, 'props.className');\n\n      var isDirectional = _isNil(directional) ? _includes(SUI.DIRECTIONAL_TRANSITIONS, animation) : directional;\n\n      if (isDirectional) {\n        return cx(animation, childClasses, useKeyOnly(animating, 'animating'), useKeyOnly(status === TRANSITION_STATUS_ENTERING, 'in'), useKeyOnly(status === TRANSITION_STATUS_EXITING, 'out'), useKeyOnly(status === TRANSITION_STATUS_EXITED, 'hidden'), useKeyOnly(status !== TRANSITION_STATUS_EXITED, 'visible'), 'transition');\n      }\n\n      return cx(animation, childClasses, useKeyOnly(animating, 'animating transition'));\n    };\n\n    _this.computeStyle = function () {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          duration = _this$props2.duration;\n      var status = _this.state.status;\n\n      var childStyle = _get(children, 'props.style');\n\n      var type = TRANSITION_STYLE_TYPE[status];\n      var animationDuration = type && normalizeTransitionDuration(duration, type) + \"ms\";\n      return _extends({}, childStyle, {\n        animationDuration: animationDuration\n      });\n    };\n\n    return _this;\n  } // ----------------------------------------\n  // Lifecycle\n  // ----------------------------------------\n\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var derivedState = computeStatuses({\n      mountOnShow: props.mountOnShow,\n      status: state.status,\n      transitionOnMount: props.transitionOnMount,\n      visible: props.visible,\n      unmountOnHide: props.unmountOnHide\n    });\n    return derivedState;\n  };\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus({});\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    this.updateStatus(prevState);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  } // ----------------------------------------\n  // Callback handling\n  // ----------------------------------------\n  ; // ----------------------------------------\n  // Render\n  // ----------------------------------------\n\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    var status = this.state.status;\n\n    if (status === TRANSITION_STATUS_UNMOUNTED) {\n      return null;\n    }\n\n    return /*#__PURE__*/cloneElement(children, {\n      className: this.computeClasses(),\n      style: this.computeStyle()\n    });\n  };\n\n  return Transition;\n}(Component);\n\nTransition.INITIAL = TRANSITION_STATUS_INITIAL;\nTransition.ENTERED = TRANSITION_STATUS_ENTERED;\nTransition.ENTERING = TRANSITION_STATUS_ENTERING;\nTransition.EXITED = TRANSITION_STATUS_EXITED;\nTransition.EXITING = TRANSITION_STATUS_EXITING;\nTransition.UNMOUNTED = TRANSITION_STATUS_UNMOUNTED;\nTransition.Group = TransitionGroup;\nTransition.handledProps = [\"animation\", \"children\", \"directional\", \"duration\", \"mountOnShow\", \"onComplete\", \"onHide\", \"onShow\", \"onStart\", \"reactKey\", \"transitionOnMount\", \"unmountOnHide\", \"visible\"];\nexport { Transition as default };\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Named animation event to used. Must be defined in CSS. */\n  animation: PropTypes.oneOfType([PropTypes.oneOf(SUI.TRANSITIONS), PropTypes.string]),\n\n  /** Primary content. */\n  children: PropTypes.element.isRequired,\n\n  /** Whether it is directional animation event or not. Use it only for custom transitions. */\n  directional: PropTypes.bool,\n\n  /** Duration of the CSS transition animation in milliseconds. */\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    hide: PropTypes.number,\n    show: PropTypes.number\n  }), PropTypes.string]),\n\n  /** Show the component; triggers the enter or exit animation. */\n  visible: PropTypes.bool,\n\n  /** Wait until the first \"enter\" transition to mount the component (add it to the DOM). */\n  mountOnShow: PropTypes.bool,\n\n  /**\n   * Callback on each transition that changes visibility to shown.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onComplete: PropTypes.func,\n\n  /**\n   * Callback on each transition that changes visibility to hidden.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onHide: PropTypes.func,\n\n  /**\n   * Callback on each transition that changes visibility to shown.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onShow: PropTypes.func,\n\n  /**\n   * Callback on animation start.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onStart: PropTypes.func,\n\n  /** React's key of the element. */\n  reactKey: PropTypes.string,\n\n  /** Run the enter animation when the component mounts, if it is initially shown. */\n  transitionOnMount: PropTypes.bool,\n\n  /** Unmount the component (remove it from the DOM) when it is not shown. */\n  unmountOnHide: PropTypes.bool\n} : {};\nTransition.defaultProps = {\n  animation: 'fade',\n  duration: 500,\n  visible: true,\n  mountOnShow: true,\n  transitionOnMount: false,\n  unmountOnHide: false\n};","map":null,"metadata":{},"sourceType":"module"}